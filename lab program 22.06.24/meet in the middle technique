def meet_in_the_middle(target, nums):
    def subsets_sum(nums):
        res = []
        for i in range(1 << len(nums)):
            subset = [nums[j] for j in range(len(nums)) if (i & (1 << j)) > 0]
            res.append(subset)
        return res

    first_half = subsets_sum(nums[:len(nums)//2])
    second_half = subsets_sum(nums[len(nums)//2:])

    first_half_sums = [sum(subset) for subset in first_half]
    second_half_sums = [sum(subset) for subset in second_half]

    second_half_sums.sort()

    count = 0
    for sum1 in first_half_sums:
        left = target - sum1
        low = 0
        high = len(second_half_sums) - 1

        while low < len(second_half_sums) and high >= 0:
            if first_half_sums[low] + second_half_sums[high] == left:
                count += 1
                low += 1
                high -= 1
            elif first_half_sums[low] + second_half_sums[high] < left:
                low += 1
            else:
                high -= 1

    return count

# Example Usage
target_sum = 10
numbers = [1, 2, 3, 4, 5]
result = meet_in_the_middle(target_sum, numbers)
print(result)
